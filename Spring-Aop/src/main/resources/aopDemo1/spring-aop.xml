<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!--proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
	proxy-target-class属值为false
	或者这个属性被省略，那么标准的JDK 基于接口的代-->

	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!--aspect 切面  pointcut 切入点-->
	<aop:config>
		<aop:aspect ref="methodInvokeTimeAspect">
			<aop:pointcut id="methodInvokeTimePC"
						  expression=" (execution(public * com.lh.aop.demo.*.*(..)) )  " />
			<aop:around pointcut-ref="methodInvokeTimePC" method="profile" />
		</aop:aspect>
	</aop:config>
	<bean id="methodInvokeTimeAspect" class="com.lh.aop.demo.MethodInvokeTimeAspect" />

	<context:component-scan base-package="com.lh.aop.demo"/>


</beans>
